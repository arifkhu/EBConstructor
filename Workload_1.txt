#Workload 1: OLAP Workload contains Realistic Procedure
##########################

#Procedure 1 Only WHILE Loop
######################################

    def create_graph1(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1", []), [], "DECLARE i INT := 1;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "100", []), [], "DECLARE k INT := 100;")
        s_3 = Statement(3, 1, 1, 2, True, True, 10200, 571,Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)", []), ["item"], "SELECT i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var", "ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer", []), ["store_sales"], "SELECT ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355, Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []), ["date_dim"], "SELECT d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 1, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var", "sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer", ["sale", "item"]), [], "SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_7 = Statement(7, 1, 1, 1, True, False, 27504814, 2392919, Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]), [], "SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_8 = Statement(8, 1, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer", ["saleDate", "saleItem"]), [], "SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
        s_10 = Statement(10, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT", ["saleItemDate","i"]), [], "SELECT d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate where i_item_sk between 1 and :i GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_13 = Statement(13, 3, 1, 2, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_14 = Statement(14, 3, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_15 = Statement(15, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        # self.control_regions[2] = ControlRegion(2, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 100, 1, "LOOP")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 15



#Procedure 2 IF ELSE 1
################################
    def create_graph2(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2", []), [], "DECLARE k INT := 2;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571, Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)",[]), ["item"],"SELECT TOP 100000 i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var", "ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer",[]), ["store_sales"], "SELECT TOP 100000 ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355, Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []),["date_dim"], "SELECT TOP 100000 d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "IF :i < :k THEN")
        s_7 = Statement(7, 2, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var", "sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer",["sale", "item"]), [], "SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_8 = Statement(8, 2, 1, 1, True, False, 27504814, 2392919, Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]), [],"SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_9 = Statement(9, 2, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer", ["saleDate", "saleItem"]), [], "SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_10 = Statement(10, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT", ["saleItemDate"]), [], "SELECT TOP 10000000 d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_11 = Statement(11, 2, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_12 = Statement(12, 2, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_13 = Statement(13, 2, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],"SELECT * FROM :result")
        s_14 = Statement(14, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "ELSE")
        s_15 = Statement(15, 2, 1, 1, True, True, 0, 0, Variable("", "", "", []), ["dummy"], "select 'Hello' as col from dummy;")
        s_16 = Statement(16, 2, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],"SELECT * FROM :result")
        s_17 = Statement(17, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 1, 1, "BRANCH")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        # self.control_regions[4] = ControlRegion(4, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17
    



#Procedure 3 IF ELSE 2
#################################################
    def create_graph3(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2", []), [], "DECLARE k INT := 2;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571, Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)", []), ["item"],"SELECT i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var", "ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer", []), ["store_sales"], "SELECT ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355, Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []), ["date_dim"], "SELECT d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "IF :i < :k THEN")
        s_7 = Statement(7, 2, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var", "sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer", ["sale", "item"]), [], "SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_8 = Statement(8, 2, 1, 1, True, False, 27504814, 2392919, Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]), [], "SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_9 = Statement(9, 2, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer", ["saleDate", "saleItem"]), [], "SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_10 = Statement(10, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT", ["saleItemDate"]), [], "SELECT d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_11 = Statement(11, 2, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_12 = Statement(12, 2, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_13 = Statement(13, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "ELSE")
        # s_15 = Statement(15, 2, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["item"]), [], "SELECT count(*) cnt FROM :item;")
        s_14 = Statement(14, 2, 1, 1, True, True, 0, 0, Variable("result", "", "", []), ["dummy"], "select 'Hello' as col from dummy;")
        s_15 = Statement(15, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        s_16 = Statement(16, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        # self.statements[s_17.id] = s_17

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 1, 1, "BRANCH")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        # self.control_regions[4] = ControlRegion(4, 1, 1, 1, "SEQ")
        # self.control_regions[5] = ControlRegion(5, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 16

    
	
#Procedure 4 Only IF Condition
##############################################

    def create_graph4(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2", []), [], "DECLARE k INT := 2;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571, Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)",[]), ["item"],"SELECT TOP 1000000 i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var","ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer",[]), ["store_sales"],"SELECT TOP 1000000 ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355,Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []),["date_dim"], "SELECT TOP 1000000 d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 1, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var","sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer",["sale", "item"]), [],"SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_7 = Statement(7, 1, 1, 1, True, False, 27504814, 2392919,Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]),[],"SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_8 = Statement(8, 1, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var","d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer",["saleDate", "saleItem"]), [],"SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "IF i<k THEN")
        s_10 = Statement(10, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var","d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT",["saleItemDate"]), [],"SELECT TOP 100000000 d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_11 = Statement(11, 2, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_12 = Statement(12, 2, 1, 1, True, False, 1, 8,Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [],"SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_13 = Statement(13, 2, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        s_14 = Statement(14, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 1, 1, "BRANCH")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 8

    

#Procedure 5 WHILE Loop Inside IF
##############################################

    def create_graph5(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2", []), [], "DECLARE k INT := 2;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571,Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)", []), ["item"], "SELECT i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var", "ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer", []), ["store_sales"], "SELECT ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355, Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []), ["date_dim"], "SELECT d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["k"]), [], "IF :k = 2 THEN")
        s_7 = Statement(7, 2, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var", "sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer", ["sale", "item"]), [], "SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item WHERE ss_item_sk = i_item_sk")
        s_8 = Statement(8, 2, 1, 1, True, False, 27504814, 2392919, Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]), [], "SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date WHERE ss_sold_date_sk = d_date_sk")
        s_9 = Statement(9, 2, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer", ["saleDate", "saleItem"]), [], "SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i"]), [], "WHILE :i < :k DO")
        s_11 = Statement(11, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT", ["saleItemDate","i"]), [], "SELECT d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate where i_item_sk between 1 and :i GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
        s_13 = Statement(13, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_14 = Statement(14, 2, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_15 = Statement(15, 2, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_16 = Statement(16, 2, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        # s_17 = Statement(17, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "ELSE")
        # s_18 = Statement(18, 2, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        # s_19 = Statement(19, 2, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        s_17 = Statement(17, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17
        # self.statements[s_18.id] = s_18
        # self.statements[s_19.id] = s_19
        # self.statements[s_20.id] = s_20

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 1, 1, "BRANCH")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        # self.control_regions[4] = ControlRegion(4, 1, 2, 1, "LOOP")
        # self.control_regions[5] = ControlRegion(5, 1, 1, 1, "SEQ")
        # self.control_regions[6] = ControlRegion(6, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17

    

#Procedure 6 IF condition inside WHILE Loop
#######################################################

    def create_graph6(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "100", []), [], "DECLARE k INT := 100;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571, Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)", []), ["item"], "SELECT TOP 10000000 i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var", "ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer", []), ["store_sales"], "SELECT TOP 10000000 ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355, Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []), ["date_dim"], "SELECT TOP 10000000 d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 1, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var", "sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer", ["sale", "item"]), [], "SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_7 = Statement(7, 1, 1, 1, True, False, 27504814, 2392919, Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]), [], "SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_8 = Statement(8, 1, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer", ["saleDate", "saleItem"]), [], "SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
        s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["k"]), [], "IF :k = 2 THEN")
        s_11 = Statement(11, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var", "d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT", ["saleItemDate","i"]), [], "SELECT TOP 1000000000 d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate where i_item_sk between 1 and :i GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        s_13 = Statement(13, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
        s_14 = Statement(14, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_15 = Statement(15, 3, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"], "SELECT c_customer_sk FROM customer")
        s_16 = Statement(16, 3, 1, 1, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [], "SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_17 = Statement(17, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 100, 1, "LOOP")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "BRANCH")
        # self.control_regions[4] = ControlRegion(4, 1, 2, 1, "SEQ")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17




#Procedure 7  Separated WHILE Loop and IF ELSE Condition
####################################################################
	
    def create_graph7(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "0", []), [], "DECLARE i INT := 0;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "100", []), [], "DECLARE k INT := 100;")
        s_3 = Statement(3, 1, 1, 3, True, True, 10200, 571, Variable("item", "table var", "i_item_desc varchar(200), i_item_sk integer, i_color char(20)",[]), ["item"],"SELECT i_item_desc, i_item_sk, i_color FROM item WHERE i_color = 'red'")
        s_4 = Statement(4, 1, 1, 2, True, True, 28800991, 4608159, Variable("sale", "table var","ss_item_sk integer, ss_sold_date_sk integer, ss_customer_sk integer, ss_quantity integer",[]), ["store_sales"],"SELECT ss_item_sk, ss_sold_date_sk, ss_customer_sk, ss_quantity FROM store_sales")
        s_5 = Statement(5, 1, 1, 2, True, True, 73049, 6355,Variable("date", "table var", "d_year integer, d_date date, d_date_sk integer", []),["date_dim"], "SELECT d_year, d_date, d_date_sk FROM date_dim")
        s_6 = Statement(6, 1, 1, 1, True, False, 645811, 232492, Variable("saleItem", "table var","sk1 integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer",["sale", "item"]), [],"SELECT ss_item_sk sk1, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity FROM :sale, :item  WHERE ss_item_sk = i_item_sk")
        s_7 = Statement(7, 1, 1, 1, True, False, 27504814, 2392919,Variable("saleDate", "table var", "sk2 integer, d_year integer, d_date date", ["sale", "date"]),[],"SELECT ss_item_sk sk2, d_year, d_date FROM :sale, :date  WHERE ss_sold_date_sk = d_date_sk")
        s_8 = Statement(8, 1, 1, 1, True, False, 219080516, 47709917, Variable("saleItemDate", "table var","d_year integer, i_item_desc varchar(200), i_item_sk integer, d_date date, ss_customer_sk integer, ss_quantity integer",["saleDate", "saleItem"]), [],"SELECT d_year, i_item_desc, i_item_sk, d_date, ss_customer_sk, ss_quantity FROM :saleDate, :saleItem WHERE sk1 = sk2")
        s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
        s_10 = Statement(10, 2, 1, 1, True, False, 178861374, 40348611, Variable("aggItems", "table var","d_year integer, i_item_desc varchar(200), i_item_sk integer, ss_customer_sk integer, ss_quantity integer, d_date date, cnt BIGINT",["saleItemDate","i"]), [],"SELECT d_year, i_item_desc, i_item_sk, ss_customer_sk, ss_quantity, d_date, COUNT(*) cnt FROM :saleItemDate where i_item_sk between 1 and :i GROUP BY ss_customer_sk, ss_quantity, i_item_desc, i_item_sk, d_date, d_year")
        s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_13 = Statement(13, 3, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "IF :i = 2 THEN")
        s_14 = Statement(14, 3, 1, 1, True, True, 495490, 1936, Variable("customer", "table var", "c_customer_sk integer", []), ["customer"],"SELECT c_customer_sk FROM customer")
        s_15 = Statement(15, 3, 1, 1, True, False, 1, 8,Variable("result", "table var", "cnt BIGINT", ["aggItems", "customer"]), [],"SELECT count(*) cnt FROM :aggItems, :customer WHERE ss_customer_sk = c_customer_sk AND ss_quantity < 100")
        s_16 = Statement(16, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        # s_17 = Statement(17, 3, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "ELSE")
        # s_18 = Statement(18, 5, 1, 3, True, False, 1, 8, Variable("result", "table var", "cnt BIGINT", ["item"]), [], "SELECT count(*) cnt FROM item;")
        # s_19 = Statement(19, 5, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [], "SELECT * FROM :result")
        s_17 = Statement(17, 3, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17
        # self.statements[s_18.id] = s_18
        # self.statements[s_19.id] = s_19
        # self.statements[s_20.id] = s_20

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 100, 1, "LOOP")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "BRANCH")
        # self.control_regions[4] = ControlRegion(4, 1, 1, 1, "SEQ")
        # self.control_regions[5] = ControlRegion(5, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17


    

