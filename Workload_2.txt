# Workload 2: OLAP Workload contains transformed procedures from TPC-DS Benchmark queries
########################################################### 

def create_graphq3(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "109", []), [], "DECLARE i INT := 109;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "128", []), [], "DECLARE k INT := 128;")
	s_3 = Statement(3, 1, 1, 1, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_4 = Statement(4, 1, 1, 1, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 1, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_6 = Statement(6, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_7 = Statement(7, 2, 1, 1, True, False, 89, 5785, Variable("v_t", "table var",
																"d_year integer,brand_id integer, brand varchar(50), sum_agg decimal(18,2)",
																["v_store_sales", "v_date_dim", "v_item"]), [""],
					"select dt.d_year,i.i_brand_id brand_id, i.i_brand brand,sum(ss_ext_sales_price) sum_agg from :v_date_dim dt, :v_store_sales vs, :v_item i where dt.d_date_sk = vs.ss_sold_date_sk and vs.ss_item_sk = i.i_item_sk and i.i_manufact_id between 109 and :i and dt.d_moy=11 group by dt.d_year,i.i_brand,i.i_brand_id order by dt.d_year,sum_agg desc,brand_id;")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_10 = Statement(10, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") //loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	# self.control_regions[2] = ControlRegion(2, 1, 2, 1, "LOOP")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 10

def create_graphq6(self):
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1980", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 1, True, True, 50000, 5500000, Variable("v_customer_address", "table var", "", []),
					["customer_address"], "SELECT * FROM customer_address")
	s_4 = Statement(4, 1, 1, 1, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_5 = Statement(5, 1, 1, 1, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_6 = Statement(6, 1, 1, 1, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_7 = Statement(7, 1, 1, 1, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 1, True, False, 0, 0, Variable("v_t", "table var", "state char(2), cnt BIGINT",
															["v_customer_address", "v_customer", "v_store_sales",
															 "v_date_dim", "v_item"]), [],
					"select a.ca_state state, count(*) cnt from :v_customer_address a, :v_customer c, :v_store_sales s, :v_date_dim d, :v_item i where a.ca_address_sk = c.c_current_addr_sk and c.c_customer_sk = s.ss_customer_sk and s.ss_sold_date_sk = d.d_date_sk and s.ss_item_sk = i.i_item_sk and d.d_month_seq = (select distinct (d_month_seq) from :v_date_dim where d_year between 1982 and :i and d_moy = 1) and i.i_current_price > 1.2 * (select avg(j.i_current_price) from :v_item j where j.i_category = i.i_category) group by a.ca_state having count(*) >= 10 order by cnt, a.ca_state;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12



def create_graphq13(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_5 = Statement(5, 1, 1, 2, True, True, 1920800, 80673600,
					Variable("v_customer_demographics", "table var", "", []), ["customer_demographics"],
					"SELECT * FROM customer_demographics")
	s_6 = Statement(6, 1, 1, 2, True, True, 7200, 151200, Variable("v_household_demographics", "table var", "", []),
					["household_demographics"], "SELECT * FROM household_demographics")
	s_7 = Statement(7, 1, 1, 2, True, True, 50000, 5500000, Variable("v_customer_address", "table var", "", []),
					["customer_address"], "SELECT * FROM customer_address")
	s_8 = Statement(8, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_10 = Statement(10, 2, 1, 1, True, False, 0, 0, Variable("v_t", "table var",
															"aa1 integer,aa2 decimal(18,2),aa3 decimal(18,2),aa4 decimal(18,2)",
															["v_store_sales", "v_store", "v_customer_demographics",
															 "v_household_demographics", "v_customer_address",
															 "v_date_dim"]), [""],
					"select avg(ss_quantity) aa1,avg(ss_ext_sales_price) aa2,avg(ss_ext_wholesale_cost) aa3,sum(ss_ext_wholesale_cost) aa4 from :v_store_sales , :v_store , :v_customer_demographics , :v_household_demographics , :v_customer_address , :v_date_dim where s_store_sk = ss_store_sk and ss_sold_date_sk = d_date_sk and d_year between 1982 and :i and((ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'M' and cd_education_status = 'Advanced Degree' and ss_sales_price between 100.00 and 150.00 and hd_dep_count = 3)or (ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'S' and cd_education_status = 'College' and ss_sales_price between 50.00 and 100.00 and hd_dep_count = 1) or (ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'W' and cd_education_status = '2 yr Degree' and ss_sales_price between 150.00 and 200.00 and hd_dep_count = 1)) and((ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('TX', 'OH', 'TX') and ss_net_profit between 100 and 200) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('OR', 'NM', 'KY') and ss_net_profit between 150 and 300) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('VA', 'TX', 'MS')  and ss_net_profit between 50 and 250));")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_13 = Statement(13, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12
	self.statements[s_13.id] = s_13

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 13

def create_graphq19(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_4 = Statement(4, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 3, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_6 = Statement(6, 1, 1, 2, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_7 = Statement(7, 1, 1, 2, True, True, 50000, 5500000, Variable("v_customer_address", "table var", "", []),
					["customer_address"], "SELECT * FROM customer_address")
	s_8 = Statement(8, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_10 = Statement(10, 2, 1, 1, True, False, 0, 0, Variable("v_t", "table var",
															  "brand_id integer, brand char(50), i_manufact_id integer, i_manufact char(50), ext_price decimal(18,2)",
															  ["v_date_dim", "v_store_sales", "v_item",
															   "v_customer",
															   "v_customer_address", "v_store"]), [""],
					 "select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,sum(ss_ext_sales_price) ext_price from :v_date_dim , :v_store_sales , :v_item , :v_customer , :v_customer_address , :v_store where d_date_sk = ss_sold_date_sk and ss_item_sk = i_item_sk and i_manager_id=8 and d_moy=11 and d_year between 1982 and :i and ss_customer_sk = c_customer_sk and c_current_addr_sk = ca_address_sk and substr(ca_zip,1,5) <> substr(s_zip,1,5) and ss_store_sk = s_store_sk group by i_brand, i_brand_id,i_manufact_id,i_manufact order by ext_price desc,i_brand,i_brand_id,i_manufact_id,i_manufact;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_13 = Statement(13, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12
	self.statements[s_13.id] = s_13

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 13

def create_graphq27(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 2, True, True, 1920800, 80673600,
					Variable("v_customer_demographics", "table var", "", []), ["customer_demographics"],
					"SELECT * FROM customer_demographics")
	s_5 = Statement(5, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_6 = Statement(6, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_7 = Statement(7, 1, 1, 3, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 1, True, False, 10135, 1114850, Variable("v_t", "table var",
																	  "i_item_id char(50), s_state char(2), agg1 decimal(16,6), agg2 decimal(18,7), agg3 decimal(18,7), agg4 decimal(18,7)",
																	  ["v_store_sales", "v_customer_demographics",
																	   "v_date_dim", "v_store", "v_item"]), [""],
					"select i_item_id, s_state, avg(ss_quantity) agg1, avg(ss_list_price) agg2, avg(ss_coupon_amt) agg3, avg(ss_sales_price) agg4 from :v_store_sales , :v_customer_demographics , :v_date_dim , :v_store , :v_item  where ss_sold_date_sk = d_date_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and ss_cdemo_sk = cd_demo_sk and cd_gender = 'M' and cd_marital_status = 'S' and cd_education_status = 'College' and d_year between 1982 and :i and s_state in ('TN','TN', 'TN', 'TN', 'TN', 'TN') group by i_item_id, s_state order by i_item_id,s_state;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12

def create_graphq34(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_5 = Statement(5, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_6 = Statement(6, 1, 1, 2, True, True, 7200, 151200, Variable("v_household_demographics", "table var", "", []),
					["household_demographics"], "SELECT * FROM household_demographics")
	s_7 = Statement(7, 1, 1, 2, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 2, True, False, 0, 0, Variable("v_t", "table var",
															"c_last_name char(30),c_first_name char(20),c_salutation char(10),c_preferred_cust_flag char(1),ss_ticket_number integer,cnt BIGINT",
															["v_store_sales", "v_date_dim", "v_store",
															 "v_household_demographics", "v_customer"]), [""],
					"select c_last_name,c_first_name,c_salutation,c_preferred_cust_flag,ss_ticket_number,cnt from (select ss_ticket_number,ss_customer_sk,count(*) cnt from :v_store_sales store_sales, :v_date_dim date_dim, :v_store store, :v_household_demographics household_demographics1 where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics1.hd_demo_sk and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)  and (household_demographics1.hd_buy_potential = '>10000' or household_demographics1.hd_buy_potential = 'Unknown') and household_demographics1.hd_vehicle_count > 0 and (case when household_demographics1.hd_vehicle_count > 0 then household_demographics1.hd_dep_count/ household_demographics1.hd_vehicle_count else null end)  > 1.2 and date_dim.d_year between 1982 and :i and store.s_county in ('Williamson County','Williamson County','Williamson County','Williamson County','Williamson County','Williamson County','Williamson County','Williamson County') group by ss_ticket_number,ss_customer_sk) dn, :v_customer where ss_customer_sk = c_customer_sk and cnt between 15 and 20 order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12


def create_graphq46(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_5 = Statement(5, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_6 = Statement(6, 1, 1, 2, True, True, 7200, 151200, Variable("v_household_demographics", "table var", "", []),
					["household_demographics"], "SELECT * FROM household_demographics")
	s_7 = Statement(7, 1, 1, 2, True, True, 50000, 5500000, Variable("v_customer_address", "table var", "", []),
					["customer_address"], "SELECT * FROM customer_address")
	s_8 = Statement(8, 1, 1, 2, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_10 = Statement(10, 2, 1, 1, True, False, 1, 210, Variable("v_t", "table var",
																"c_last_name char(30),c_first_name char(20),ca_city varchar(60),bought_city varchar(60),ss_ticket_number integer,amt decimal(18,2),profit decimal(18,2)",
																["v_store_sales", "v_date_dim", "v_store",
																 "v_household_demographics", "v_customer_address",
																 "v_customer"]), [""],
					 "select c_last_name,c_first_name,ca_city,bought_city,ss_ticket_number,amt,profit from (select ss_ticket_number,ss_customer_sk,ca_city bought_city,sum(ss_coupon_amt) amt,sum(ss_net_profit) profit from :v_store_sales store_sales, :v_date_dim date_dim, :v_store store, :v_household_demographics household_demographics, :v_customer_address customer_address1 where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk and store_sales.ss_addr_sk = customer_address1.ca_address_sk and (household_demographics.hd_dep_count = 4 or household_demographics.hd_vehicle_count= 3) and date_dim.d_dow in (6,0) and date_dim.d_year between 1982 and :i and store.s_city in ('Fairview','Fairview','Fairview','Fairview','Fairview') group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn , :v_customer customer, :v_customer_address current_addr where ss_customer_sk = c_customer_sk and customer.c_current_addr_sk = current_addr.ca_address_sk and current_addr.ca_city <> bought_city order by c_last_name,c_first_name,ca_city,bought_city,ss_ticket_number;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_13 = Statement(13, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12
	self.statements[s_13.id] = s_13

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") // loop iterations
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 13


def create_graphq48(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_5 = Statement(5, 1, 1, 2, True, True, 1920800, 80673600,
					Variable("v_customer_demographics", "table var", "", []), ["customer_demographics"],
					"SELECT * FROM customer_demographics")
	s_6 = Statement(6, 1, 1, 2, True, True, 50000, 5500000, Variable("v_customer_address", "table var", "", []),
					["customer_address"], "SELECT * FROM customer_address")
	s_7 = Statement(7, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 1, True, False, 1, 8, Variable("v_t", "table var", "cnt BIGINT",
															["v_store_sales", "v_store", "v_customer_demographics",
															 "v_customer_address", "v_date_dim"]), [""],
					"select sum(ss_quantity) cnt from :v_store_sales , :v_store , :v_customer_demographics , :v_customer_address , :v_date_dim where s_store_sk = ss_store_sk and  ss_sold_date_sk = d_date_sk and d_year between 1982 and :i and ((cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'M' and cd_education_status = '4 yr Degree' and ss_sales_price between 100.00 and 150.00) or (cd_demo_sk = ss_cdemo_sk and   cd_marital_status = 'D' and cd_education_status = '2 yr Degree' and ss_sales_price between 50.00 and 100.00) or (cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'S' and cd_education_status = 'College' and ss_sales_price between 150.00 and 200.00)) and ((ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('CO', 'OH', 'TX') and ss_net_profit between 0 and 2000) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('OR', 'MN', 'KY') and ss_net_profit between 150 and 3000) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('VA', 'CA', 'MS') and ss_net_profit between 50 and 25000));")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP") \\loop iteration
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12

def create_graphq53(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1200", []), [], "DECLARE i INT := 1200;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "1219", []), [], "DECLARE k INT := 1219;")
	s_3 = Statement(3, 1, 1, 3, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_4 = Statement(4, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_6 = Statement(6, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_7 = Statement(7, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_8 = Statement(8, 2, 1, 1, True, False, 1, 40, Variable("v_t", "table var",
															 "i_manufact_id integer, sum_sales decimal(18,2), avg_quarterly_sales decimal(18,2)",
															 ["v_item", "v_store_sales", "v_date_dim", "v_store"]),
					[""],
					"select * from (select i_manufact_id,sum(ss_sales_price) sum_sales,avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales from :v_item , :v_store_sales , :v_date_dim , :v_store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_month_seq between 1200 and :i and ((i_category in ('Books','Children','Electronics') and i_class in ('personal','portable','reference','self-help') and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7', 'exportiunivamalg #9','scholaramalgamalg #9')) or(i_category in ('Women','Music','Men') and i_class in ('accessories','classical','fragrances','pants') and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1', 'importoamalg #1'))) group by i_manufact_id, d_qoy ) tmp1 where case when avg_quarterly_sales > 0 then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales else null end > 0.1 order by avg_quarterly_sales, sum_sales, i_manufact_id;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_11 = Statement(11, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 11

def create_graphq55(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 1, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_4 = Statement(4, 1, 1, 1, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 1, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_6 = Statement(6, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_7 = Statement(7, 2, 1, 1, True, False, 1, 74,
					Variable("v_t", "table var", "brand_id integer, brand char(50), ext_price decimal(18,2)",
							 ["v_date_dim", "v_store_sales", "v_item"]), [""],
					"select i_brand_id brand_id, i_brand brand, sum(ss_ext_sales_price) ext_price from :v_date_dim , :v_store_sales , :v_item where d_date_sk = ss_sold_date_sk and ss_item_sk = i_item_sk and i_manager_id=28 and d_moy=11 and d_year between 1982 and :i group by i_brand, i_brand_id order by ext_price desc, i_brand_id;")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_10 = Statement(10, 1, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					"select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	# self.statements[s_6.id] = s_6
	# self.statements[s_7.id] = s_7
	# self.statements[s_8.id] = s_8
	# self.statements[s_9.id] = s_9
	# self.statements[s_10.id] = s_10

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 10

def create_graphq59(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1200", []), [], "DECLARE i INT := 1200;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "1219", []), [], "DECLARE k INT := 1219;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_5 = Statement(5, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_6 = Statement(6, 1, 1, 1, True, False, 1, 128, Variable("v_wss", "table var",
															  "d_week_seq integer,ss_store_sk integer,sun_sales decimal(18,2),mon_sales decimal(18,2),tue_sales decimal(18,2),wed_sales decimal(18,2), thu_sales decimal(18,2),fri_sales decimal(18,2),sat_sales decimal(18,2)",
															  ["v_store_sales", "v_date_dim"]), [""],
					"select d_week_seq,ss_store_sk,sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales, sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales, sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales from :v_store_sales , :v_date_dim where d_date_sk = ss_sold_date_sk group by d_week_seq,ss_store_sk;")
	s_7 = Statement(7, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_8 = Statement(8, 2, 1, 1, True, False, 1, 186, Variable("v_t", "table var",
															  "s_store_name1 varchar(50),s_store_id1 char(16), d_week_seq1 integer,d1 decimal(18,2),d2 decimal(18,2),d3 decimal(18,2),d4 decimal(18,2), d5 decimal(18,2),d6 decimal(18,2),d7 decimal(18,2)",
															  ["v_date_dim", "v_store", "v_wss"]), [""],
					"select s_store_name1,s_store_id1,d_week_seq1,sun_sales1/sun_sales2 d1,mon_sales1/mon_sales2 d2,tue_sales1/tue_sales2 d3,wed_sales1/wed_sales2 d4,thu_sales1/thu_sales2 d5,fri_sales1/fri_sales2 d6,sat_sales1/sat_sales2 d7 from (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1,s_store_id s_store_id1,sun_sales sun_sales1,mon_sales mon_sales1,tue_sales tue_sales1,wed_sales wed_sales1,thu_sales thu_sales1,fri_sales fri_sales1,sat_sales sat_sales1 from :v_wss wss, :v_store , :v_date_dim d where d.d_week_seq = wss.d_week_seq and ss_store_sk = s_store_sk and   d_month_seq between 1200 and :i) y, (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2,s_store_id s_store_id2,sun_sales sun_sales2,mon_sales mon_sales2,tue_sales tue_sales2,wed_sales wed_sales2,thu_sales thu_sales2,fri_sales fri_sales2,sat_sales sat_sales2 from :v_wss wss, :v_store , :v_date_dim d where d.d_week_seq = wss.d_week_seq and ss_store_sk = s_store_sk and d_month_seq between 1224 and 1235) x where s_store_id1=s_store_id2 and d_week_seq1=d_week_seq2-52 order by s_store_name1,s_store_id1,d_week_seq1;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_11 = Statement(11, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 11


def create_graphq63(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1200", []), [], "DECLARE i INT := 1200;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "1219", []), [], "DECLARE k INT := 1219;")
	s_3 = Statement(3, 1, 1, 3, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_4 = Statement(4, 1, 1, 1, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_6 = Statement(6, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_7 = Statement(7, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_8 = Statement(8, 2, 1, 1, True, False, 1, 40, Variable("v_t", "table var",
															 "i_manager_id integer, sum_sales decimal(18,2), avg_monthly_sales decimal(18,2)",
															 ["v_item", "v_store_sales", "v_date_dim", "v_store"]),
					[""],
					"select * from (select i_manager_id,sum(ss_sales_price) sum_sales,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales from :v_item , :v_store_sales , :v_date_dim , :v_store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_month_seq between 1200 and :i and ((i_category in ('Books','Children','Electronics') and i_class in ('personal','portable','reference','self-help') and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7', 'exportiunivamalg #9','scholaramalgamalg #9')) or(i_category in ('Women','Music','Men') and i_class in ('accessories','classical','fragrances','pants') and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1', 'importoamalg #1'))) group by i_manager_id, d_moy) tmp1 where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1 order by i_manager_id ,avg_monthly_sales ,sum_sales;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_11 = Statement(11, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 11


def create_graphq73(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_5 = Statement(5, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_6 = Statement(6, 1, 1, 2, True, True, 7200, 151200, Variable("v_household_demographics", "table var", "", []),
					["household_demographics"], "SELECT * FROM household_demographics")
	s_7 = Statement(7, 1, 1, 2, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 1, True, False, 1, 85, Variable("v_t", "table var",
															 "c_last_name char(30),c_first_name char(20),c_salutation char(10),c_preferred_cust_flag char(1) ,ss_ticket_number integer,cnt BIGINT",
															 ["v_store_sales", "v_date_dim", "v_store",
															  "v_household_demographics", "v_customer"]), [""],
					"select c_last_name,c_first_name,c_salutation,c_preferred_cust_flag ,ss_ticket_number,cnt from (select ss_ticket_number,ss_customer_sk,count(*) cnt from :v_store_sales store_sales, :v_date_dim date_dim, :v_store store, :v_household_demographics household_demographics1 where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk  and store_sales.ss_hdemo_sk = household_demographics1.hd_demo_sk and date_dim.d_dom between 1 and 2  and (household_demographics1.hd_buy_potential = '>10000' or household_demographics1.hd_buy_potential = 'Unknown') and household_demographics1.hd_vehicle_count > 0 and case when household_demographics1.hd_vehicle_count > 0 then household_demographics1.hd_dep_count/ household_demographics1.hd_vehicle_count else null end > 1 and date_dim.d_year between 1982 and :i and store.s_county in ('Williamson County','Franklin Parish','Bronx County','Orange County') group by ss_ticket_number,ss_customer_sk) dj , :v_customer where ss_customer_sk = c_customer_sk and cnt between 1 and 5 order by cnt desc, c_last_name asc;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12

def create_graphq79(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "2001", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_4 = Statement(4, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_5 = Statement(5, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_6 = Statement(6, 1, 1, 2, True, True, 7200, 151200, Variable("v_household_demographics", "table var", "", []),
					["household_demographics"], "SELECT * FROM household_demographics")
	s_7 = Statement(7, 1, 1, 2, True, True, 100000, 13200000, Variable("v_customer", "table var", "", []),
					["customer"], "SELECT * FROM customer")
	s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_9 = Statement(9, 2, 1, 1, True, False, 1, 150, Variable("v_t", "table var",
															  "c_last_name char(30),c_first_name char(20),s_city varchar(60),ss_ticket_number integer,amt decimal(18,2),profit decimal(18,2)",
															  ["v_store_sales", "v_date_dim", "v_store",
															   "v_household_demographics", "v_customer"]), [""],
					"select c_last_name,c_first_name,substr(s_city,1,30) s_city,ss_ticket_number,amt,profit from (select ss_ticket_number,ss_customer_sk,store.s_city,sum(ss_coupon_amt) amt,sum(ss_net_profit) profit from :v_store_sales store_sales, :v_date_dim date_dim, :v_store store, :v_household_demographics household_demographics1 where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk   and store_sales.ss_hdemo_sk = household_demographics1.hd_demo_sk and (household_demographics1.hd_dep_count = 6 or household_demographics1.hd_vehicle_count > 2) and date_dim.d_dow = 1 and date_dim.d_year between 1982 and :i  and store.s_number_employees between 200 and 295 group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms , :v_customer where ss_customer_sk = c_customer_sk order by c_last_name,c_first_name,substr(s_city,1,30), profit;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_11 = Statement(11, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_12 = Statement(12, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11
	self.statements[s_12.id] = s_12

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 12



def create_graphq89(self):
	# stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
	s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "INT", "1982", []), [], "DECLARE i INT := 1982;")
	s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "INT", "5", []), [], "DECLARE k INT := 2001;")
	s_3 = Statement(3, 1, 1, 3, True, True, 18000, 5058000, Variable("v_item", "table var", "", []), ["item"],
					"SELECT * FROM item")
	s_4 = Statement(4, 1, 1, 4, True, True, 2880404, 472386256, Variable("v_store_sales", "table var", "", []),
					["store_sales"], "SELECT * FROM store_sales")
	s_5 = Statement(5, 1, 1, 4, True, True, 73049, 10299909, Variable("v_date_dim", "table var", "", []),
					["date_dim"], "SELECT * FROM date_dim")
	s_6 = Statement(6, 1, 1, 4, True, True, 12, 3156, Variable("v_store", "table var", "", []), ["store"],
					"SELECT * FROM store")
	s_7 = Statement(7, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
	s_8 = Statement(8, 2, 1, 1, True, False, 1, 290, Variable("v_t", "table var",
															  "i_category char(50), i_class char(50), i_brand char(50), s_store_name varchar(50), s_company_name varchar(50), d_moy integer, sum_sales decimal(18,2), avg_monthly_sales decimal(18,2)",
															  ["v_item", "v_store_sales", "v_date_dim", "v_store"]),
					[""],
					"select * from(select i_category, i_class, i_brand,s_store_name, s_company_name,d_moy,sum(ss_sales_price) sum_sales,avg(sum(ss_sales_price)) over (partition by i_category, i_brand, s_store_name, s_company_name) avg_monthly_sales from :v_item , :v_store_sales , :v_date_dim , :v_store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_year between 1982 and :i and ((i_category in ('Books','Electronics','Sports') and i_class in ('computers','stereo','football')) or (i_category in ('Men','Jewelry','Women') and i_class in ('shirts','birdal','dresses'))) group by i_category, i_class, i_brand, s_store_name, s_company_name, d_moy) tmp1 where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1 order by sum_sales - avg_monthly_sales, s_store_name;")
	s_9 = Statement(9, 2, 1, 1, False, False, 0, 0, Variable("i", "INT", "", ["i"]), [], "i = :i + 1;")
	s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
	s_11 = Statement(11, 3, 1, 1, True, False, 1, 8, Variable("", "", "", ["v_t"]), [""],
					 "select count(*) from :v_t ;")

	self.statements[s_1.id] = s_1
	self.statements[s_2.id] = s_2
	self.statements[s_3.id] = s_3
	self.statements[s_4.id] = s_4
	self.statements[s_5.id] = s_5
	self.statements[s_6.id] = s_6
	self.statements[s_7.id] = s_7
	self.statements[s_8.id] = s_8
	self.statements[s_9.id] = s_9
	self.statements[s_10.id] = s_10
	self.statements[s_11.id] = s_11

	# estimate_costs_of_statements()
	for sid in self.statements:
		stmt = self.statements.get(sid)
		for csid in self.statements:
			cstmt = self.statements.get(csid)
			if stmt.vars.out_var_name in cstmt.vars.in_var_names:
				stmt.consumers.append(csid)
				cstmt.producers.append(sid)

	# region_id, parent_eb_id, l_count, o_l_count
	self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
	self.control_regions[2] = ControlRegion(2, 1, 20, 1, "LOOP")
	self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
	for sid in self.statements:
		self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
	return 11

