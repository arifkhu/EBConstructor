# Procedures Transformed from TPC-E Queries
################################################


#Procedure 1
#################


    def create_graphq101(self):
        # stid, crid, ebid, fnid, is_declarative, hbt, nr, size, out_var, base_tables, expr
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("co_id", "BIGINT", "4300000001", []), [],
                        "Declare co_id BIGINT:= 4300000001;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("access_lob_flag", "INT", "1", []), [],
                        "Declare access_lob_flag INT:=1;")
        s_3 = Statement(3, 1, 1, 2, True, True, 210, 210,
                        Variable("SECURITY", "table var",
                                 "S_NAME VARCHAR(70),S_NUM_OUT BIGINT,S_START_DATE DATE, S_EXCH_DATE DATE, S_PE DECIMAL, S_52WK_HIGH DECIMAL, S_52WK_HIGH_DATE DATE, S_52WK_LOW DECIMAL, S_52WK_LOW_DATE DATE, S_DIVIDEND DECIMAL, S_YIELD DECIMAL,S_SYMB VARCHAR(15),S_CO_ID BIGINT,S_EX_ID  VARCHAR(6)",
                                 []), ["SECURITY"],
                        "SELECT S_NAME,S_NUM_OUT,S_START_DATE, S_EXCH_DATE, S_PE, S_52WK_HIGH, S_52WK_HIGH_DATE, S_52WK_LOW, S_52WK_LOW_DATE, S_DIVIDEND, S_YIELD,S_SYMB,S_CO_ID,S_EX_ID FROM SECURITY where S_SYMB = 'ZICA'")
        s_4 = Statement(4, 1, 1, 2, True, True, 282, 282000,
                        Variable("COMPANY", "table var", "", []), ["COMPANY"],
                        "SELECT CO_ID, CO_NAME, CO_SP_RATE, CO_CEO, CO_DESC, CO_OPEN_DATE, CO_ST_ID,CO_AD_ID FROM COMPANY")
        s_5 = Statement(5, 1, 1, 2, True, True, 268, 805072,
                        Variable("ADDRESS", "table var", "", []), ["ADDRESS"],
                        "SELECT AD_CTRY, AD_LINE1, AD_LINE2, AD_ZC_CODE,AD_ID FROM ADDRESS")
        s_6 = Statement(6, 1, 1, 2, True, True, 172, 2535452,
                        Variable("ZIP_CODE", "table var", "", []), ["ZIP_CODE"],
                        "SELECT ZC_TOWN, ZC_DIV,zc_code FROM ZIP_CODE")
        s_7 = Statement(7, 1, 1, 2, True, True, 294, 1176,
                        Variable("EXCHANGE", "table var", "", []), ["EXCHANGE"],
                        "SELECT EX_CLOSE, EX_DESC, EX_NAME, EX_NUM_SYMB, EX_OPEN, EX_AD_ID,EX_ID  FROM EXCHANGE")
        s_8 = Statement(8, 1, 1, 2, True, True, 1, 1,
                        Variable("COMPANY_COMPETITOR", "table var", "", ["co_id"]), ["COMPANY_COMPETITOR"],
                        "SELECT CP_COMP_CO_ID, CP_IN_ID,CP_CO_ID FROM COMPANY_COMPETITOR where CP_CO_ID = 4300000001")
        s_9 = Statement(9, 1, 1, 2, True, True, 1, 1,
                         Variable("INDUSTRY", "table var", "", []), ["INDUSTRY"],
                         "SELECT IN_NAME,IN_ID FROM INDUSTRY")
        s_10 = Statement(10, 1, 1, 2, True, True, 1, 1,
                         Variable("FINANCIAL", "table var", "", ["co_id"]), ["FINANCIAL"],
                         "select FI_CO_ID,FI_YEAR, FI_QTR, FI_QTR_START_DATE, FI_REVENUE, FI_NET_EARN, FI_BASIC_EPS, FI_DILUT_EPS, FI_MARGIN, FI_INVENTORY, FI_ASSETS, FI_LIABILITY, FI_OUT_BASIC, FI_OUT_DILUT from FINANCIAL where FI_CO_ID = 4300000001")
        s_11 = Statement(11, 1, 1, 2, True, True, 1, 1,
                         Variable("daily_market", "table var", "", []), ["daily_market"],
                         "SELECT DM_DATE, DM_CLOSE, DM_HIGH, DM_LOW, DM_VOL from daily_market where DM_S_SYMB = 'AYE' and DM_DATE >= '2001-12-18'")
        s_12 = Statement(12, 1, 1, 2, True, True, 1, 1,
                         Variable("NEWS_XREF", "table var", "", ["co_id"]), ["NEWS_XREF"],
                         "SELECT NX_NI_ID,NX_CO_ID FROM NEWS_XREF where NX_CO_ID = 4300000001")
        s_13 = Statement(13, 1, 1, 2, True, True, 1, 1,
                         Variable("NEWS_ITEM", "table var", "", []), ["NEWS_ITEM"],
                         "SELECT NI_ITEM, NI_DTS, NI_SOURCE, NI_AUTHOR,NI_ID,NI_HEADLINE, NI_SUMMARY FROM NEWS_ITEM")
        s_14 = Statement(14, 1, 1, 2, True, True, 1, 1,
                         Variable("LAST_TRADE", "table var", "", []), ["LAST_TRADE"],
                         "select LT_PRICE, LT_OPEN_PRICE, LT_VOL from LAST_TRADE where LT_S_SYMB = 'ZICA'")
        s_15 = Statement(15, 1, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["SECURITY", "COMPANY", "ADDRESS", "ZIP_CODE", "EXCHANGE"]), [],
                         "select S_NAME, CO_ID, CO_NAME, CO_SP_RATE, CO_CEO, CO_DESC, CO_OPEN_DATE, CO_ST_ID, CA.AD_LINE1, CA.AD_LINE2, ZCA.ZC_TOWN, ZCA.ZC_DIV, CA.AD_ZC_CODE, CA.AD_CTRY, S_NUM_OUT, S_START_DATE, S_EXCH_DATE, S_PE, S_52WK_HIGH, S_52WK_HIGH_DATE, S_52WK_LOW, S_52WK_LOW_DATE, S_DIVIDEND, S_YIELD, ZEA.ZC_DIV, EA.AD_CTRY, EA.AD_LINE1, EA.AD_LINE2, ZEA.ZC_TOWN, EA.AD_ZC_CODE, EX_CLOSE, EX_DESC, EX_NAME, EX_NUM_SYMB, EX_OPEN from :SECURITY, :COMPANY, :ADDRESS CA, :ADDRESS EA, :ZIP_CODE ZCA, :ZIP_CODE ZEA, :EXCHANGE where CO_ID = S_CO_ID and CA.AD_ID = CO_AD_ID and EA.AD_ID = EX_AD_ID and EX_ID = S_EX_ID and ca.ad_zc_code = zca.zc_code and ea.ad_zc_code =zea.zc_code;")
        s_16 = Statement(16, 1, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["COMPANY_COMPETITOR", "COMPANY", "INDUSTRY"]), [],
                         "select CO_NAME,IN_NAME from :COMPANY_COMPETITOR, :COMPANY, :INDUSTRY where CO_ID = CP_COMP_CO_ID and IN_ID = CP_IN_ID;")
        s_17 = Statement(17, 1, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["FINANCIAL", "co_id"]), [],
                         "select FI_YEAR, FI_QTR, FI_QTR_START_DATE, FI_REVENUE, FI_NET_EARN, FI_BASIC_EPS, FI_DILUT_EPS, FI_MARGIN, FI_INVENTORY, FI_ASSETS, FI_LIABILITY, FI_OUT_BASIC, FI_OUT_DILUT from :FINANCIAL order by FI_YEAR asc, FI_QTR;")
        s_18 = Statement(18, 1, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["daily_market"]), [],
                         "select DM_DATE,DM_CLOSE,DM_HIGH,DM_LOW,DM_VOL from :daily_market order by DM_DATE asc;")
        s_19 = Statement(19, 1, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["LAST_TRADE"]), [],
                         "select LT_PRICE, LT_OPEN_PRICE, LT_VOL from :LAST_TRADE ;")
        s_20 = Statement(20, 2, 1, 1, False, False, 1, 1,
                         Variable("", "", "", ["access_lob_flag"]), [],
                         "if :access_lob_flag = 1 Then")
        s_21 = Statement(21, 2, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["NEWS_XREF", "NEWS_ITEM"]), [],
                         "select NI_ITEM, NI_DTS, NI_SOURCE, NI_AUTHOR from :NEWS_XREF, :NEWS_ITEM where NI_ID = NX_NI_ID;")
        s_22 = Statement(22, 2, 1, 1, False, False, 1, 1,
                         Variable("", "", "", []), [],
                         "else")
        s_23 = Statement(23, 2, 1, 1, True, False, 1, 1,
                         Variable("", "", "", ["NEWS_XREF", "NEWS_ITEM"]), [],
                         "select NI_DTS, NI_SOURCE, NI_AUTHOR, NI_HEADLINE, NI_SUMMARY from :NEWS_XREF, :NEWS_ITEM where NI_ID = NX_NI_ID;")
        s_24 = Statement(24, 2, 1, 1, False, False, 1, 1,
                         Variable("", "", "", []), [],
                         "end if;")

        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17
        self.statements[s_18.id] = s_18
        self.statements[s_19.id] = s_19
        self.statements[s_20.id] = s_20
        self.statements[s_21.id] = s_21
        self.statements[s_22.id] = s_22
        self.statements[s_23.id] = s_23
        self.statements[s_24.id] = s_24
        # self.statements[s_25.id] = s_25
        # self.statements[s_26.id] = s_26
        # self.statements[s_27.id] = s_27
        # self.statements[s_28.id] = s_28

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 1, 1, "BRANCH")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 24


#Procedure 2
#################

def create_graphq201(self):
        s_1 = Statement(1, 1, 1, 1, False, False, 0, 0, Variable("i", "BIGINT", "0", []), [],
                        "DECLARE i BIGINT := 200000000000001;")
        s_2 = Statement(2, 1, 1, 1, False, False, 0, 0, Variable("k", "BIGINT", "200000000000110", []), [],
                        "DECLARE k BIGINT := 200000000000110;")
        s_3 = Statement(3, 1, 1, 2, True, True, 14400000, 1267200000, Variable("TRADE", "table var",
                                                                               "T_BID_PRICE DECIMAL, T_EXEC_NAME VARCHAR(49), T_IS_CASH TINYINT, T_ID BIGINT, T_TRADE_PRICE DECIMAL, T_CA_ID BIGINT, T_DTS TIMESTAMP",
                                                                               []), ["TRADE"],
                        "select T_BID_PRICE, T_EXEC_NAME, T_IS_CASH, T_ID, T_TRADE_PRICE, T_CA_ID, T_DTS from TRADE")
        s_4 = Statement(4, 1, 1, 2, True, True, 14400000, 993600000, Variable("SETTLEMENT", "table var",
                                                                              "SE_AMT DECIMAL, SE_CASH_DUE_DATE DATE, SE_CASH_TYPE VARCHAR(40), SE_T_ID BIGINT",
                                                                              []), ["SETTLEMENT"],
                        "select SE_AMT, SE_CASH_DUE_DATE, SE_CASH_TYPE, SE_T_ID from SETTLEMENT")
        s_5 = Statement(5, 1, 1, 2, True, True, 13248160, 2185946400, Variable("CASH_TRANSACTION", "table var",
                                                                               "CT_AMT DECIMAL, CT_DTS TIMESTAMP, CT_NAME VARCHAR(100), CT_T_ID BIGINT",
                                                                               []), ["CASH_TRANSACTION"],
                        "select CT_AMT, CT_DTS, CT_NAME, CT_T_ID from CASH_TRANSACTION")
        s_6 = Statement(6, 1, 1, 2, True, True, 34559809, 1658870832,
                        Variable("TRADE_HISTORY", "table var", "TH_DTS TIMESTAMP, TH_ST_ID VARCHAR(4), TH_T_ID BIGINT",
                                 []), ["TRADE_HISTORY"], "select TH_DTS, TH_ST_ID, TH_T_ID from TRADE_HISTORY")
        s_7 = Statement(7, 2, 1, 1, True, False, 1111, 81103, Variable("", "",
                                                                       "T_BID_PRICE DECIMAL, T_EXEC_NAME VARCHAR(49), T_IS_CASH TINYINT, T_ID BIGINT, T_TRADE_PRICE DECIMAL",
                                                                       ["TRADE"]), [],
                        "select T_BID_PRICE, T_EXEC_NAME, T_IS_CASH, T_ID, T_TRADE_PRICE from :TRADE where T_CA_ID = 43000002061 and T_DTS >= '2005-03-11' and T_DTS <= '2005-03-14' order by T_DTS asc;")
        s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
        s_9 = Statement(9, 2, 1, 1, True, False, 1, 60,
                         Variable("", "", "SE_AMT DECIMAL, SE_CASH_DUE_DATE DATE, SE_CASH_TYPE VARCHAR(40)",
                                  ["SETTLEMENT"]), [],
                         "select SE_AMT, SE_CASH_DUE_DATE, SE_CASH_TYPE from :SETTLEMENT where SE_T_ID = i")
        s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i"]), [], "IF :i > 0 THEN")
        s_11 = Statement(11, 2, 1, 1, True, False, 1, 137,
                         Variable("", "", "CT_AMT DECIMAL, CT_DTS TIMESTAMP, CT_NAME VARCHAR(100)",
                                  ["CASH_TRANSACTION"]), [],
                         "select CT_AMT, CT_DTS, CT_NAME from :CASH_TRANSACTION where CT_T_ID = i")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        s_13 = Statement(13, 2, 1, 1, True, False, 3, 138,
                         Variable("results", "table var", "TH_DTS TIMESTAMP, TH_ST_ID VARCHAR(4)", ["TRADE_HISTORY"]),
                         [],
                         "select TH_DTS, TH_ST_ID from :TRADE_HISTORY where TH_T_ID = i order by TH_DTS")
        s_14 = Statement(14, 2, 1, 1, False, False, 0, 0, Variable("i", "BIGINT", "", ["i"]), [], "i = :i + 1;")
        s_15 = Statement(15, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_16 = Statement(16, 3, 1, 1, True, False, 1, 8,
                         Variable("result", "table var", "cnt BIGINT", ["results"]), [],
                         "SELECT count(*) cnt FROM :results ")
        s_17 = Statement(17, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],
                         "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17
        # self.statements[s_18.id] = s_18
        # self.statements[s_19.id] = s_19
        # self.statements[s_20.id] = s_20
        # self.statements[s_21.id] = s_21
        # self.statements[s_22.id] = s_22
        # self.statements[s_23.id] = s_23
        # self.statements[s_24.id] = s_24
        # self.statements[s_25.id] = s_25
        # self.statements[s_26.id] = s_26
        # self.statements[s_27.id] = s_27
        # self.statements[s_28.id] = s_28

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 110, 1, "LOOP")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17
		


#Procedure 3
#################

def create_graphq301(self):
        s_1 = Statement(1, 1, 1, 2, False, False, 0, 0, Variable("i", "BIGINT", "0", []), [],
                        "DECLARE i BIGINT := 200000000000001;")
        s_2 = Statement(2, 1, 1, 2, False, False, 0, 0, Variable("k", "BIGINT", "200000000000110", []), [],
                        "DECLARE k BIGINT := 200000000000110;")
        s_3 = Statement(3, 1, 1, 3, True, True, 14400000, 1267200000, Variable("TRADE", "table var",
                                                                               "T_BID_PRICE DECIMAL, T_EXEC_NAME VARCHAR(49), T_IS_CASH TINYINT, T_ID BIGINT, T_TRADE_PRICE DECIMAL, T_CA_ID BIGINT, T_DTS TIMESTAMP, T_S_SYMB VARCHAR(15)",
                                                                               []), ["TRADE"],
                        "select T_BID_PRICE, T_EXEC_NAME, T_IS_CASH, T_ID, T_TRADE_PRICE, T_CA_ID, T_DTS, T_S_SYMB from TRADE")
        s_4 = Statement(4, 1, 1, 2, True, True, 14400000, 993600000, Variable("SETTLEMENT", "table var",
                                                                              "SE_AMT DECIMAL, SE_CASH_DUE_DATE DATE, SE_CASH_TYPE VARCHAR(40), SE_T_ID BIGINT",
                                                                              []), ["SETTLEMENT"],
                        "select SE_AMT, SE_CASH_DUE_DATE, SE_CASH_TYPE, SE_T_ID from SETTLEMENT")
        s_5 = Statement(5, 1, 1, 2, True, True, 13248160, 2185946400, Variable("CASH_TRANSACTION", "table var",
                                                                               "CT_AMT DECIMAL, CT_DTS TIMESTAMP, CT_NAME VARCHAR(100), CT_T_ID BIGINT",
                                                                               []), ["CASH_TRANSACTION"],
                        "select CT_AMT, CT_DTS, CT_NAME, CT_T_ID from CASH_TRANSACTION")
        s_6 = Statement(6, 1, 1, 2, True, True, 34559809, 1658870832,
                        Variable("TRADE_HISTORY", "table var", "TH_DTS TIMESTAMP, TH_ST_ID VARCHAR(4), TH_T_ID BIGINT",
                                 []), ["TRADE_HISTORY"], "select TH_DTS, TH_ST_ID, TH_T_ID from TRADE_HISTORY")
        s_7 = Statement(7, 2, 1, 1, True, False, 1111, 81103, Variable("", "",
                                                                       "T_BID_PRICE DECIMAL, T_EXEC_NAME VARCHAR(49), T_IS_CASH TINYINT, T_ID BIGINT, T_TRADE_PRICE DECIMAL",
                                                                       ["TRADE"]), [],
                        "select T_BID_PRICE, T_EXEC_NAME, T_IS_CASH, T_ID, T_TRADE_PRICE from :TRADE where T_S_SYMB = 'ABY' and T_DTS >= '2005-03-11' and T_DTS <= '2005-03-14' order by T_DTS asc;")
        s_8 = Statement(8, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i", "k"]), [], "WHILE :i < :k DO")
        s_9 = Statement(9, 2, 1, 1, True, False, 1, 60,
                         Variable("", "", "SE_AMT DECIMAL, SE_CASH_DUE_DATE DATE, SE_CASH_TYPE VARCHAR(40)",
                                  ["SETTLEMENT"]), [],
                         "select SE_AMT, SE_CASH_DUE_DATE, SE_CASH_TYPE from :SETTLEMENT where SE_T_ID = i")
        s_10 = Statement(10, 2, 1, 1, False, False, 0, 0, Variable("", "", "", ["i"]), [], "IF :i > 0 THEN")
        s_11 = Statement(11, 2, 1, 1, True, False, 1, 137,
                         Variable("", "", "CT_AMT DECIMAL, CT_DTS TIMESTAMP, CT_NAME VARCHAR(100)",
                                  ["CASH_TRANSACTION"]), [],
                         "select CT_AMT, CT_DTS, CT_NAME from :CASH_TRANSACTION where CT_T_ID = i")
        s_12 = Statement(12, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END IF;")
        s_13 = Statement(13, 2, 1, 1, True, False, 3, 138,
                         Variable("results", "table var", "TH_DTS TIMESTAMP, TH_ST_ID VARCHAR(4)", ["TRADE_HISTORY"]),
                         [],
                         "select TH_DTS, TH_ST_ID from :TRADE_HISTORY where TH_T_ID = i order by TH_DTS")
        s_14 = Statement(14, 2, 1, 1, False, False, 0, 0, Variable("i", "BIGINT", "", ["i"]), [], "i = :i + 1;")
        s_15 = Statement(15, 2, 1, 1, False, False, 0, 0, Variable("", "", "", []), [], "END WHILE;")
        s_16 = Statement(16, 3, 1, 1, True, False, 1, 8,
                         Variable("result", "table var", "cnt BIGINT", ["results"]), [],
                         "SELECT count(*) cnt FROM :results ")
        s_17 = Statement(17, 3, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],
                         "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12
        self.statements[s_13.id] = s_13
        self.statements[s_14.id] = s_14
        self.statements[s_15.id] = s_15
        self.statements[s_16.id] = s_16
        self.statements[s_17.id] = s_17
        # self.statements[s_18.id] = s_18
        # self.statements[s_19.id] = s_19
        # self.statements[s_20.id] = s_20
        # self.statements[s_21.id] = s_21
        # self.statements[s_22.id] = s_22
        # self.statements[s_23.id] = s_23
        # self.statements[s_24.id] = s_24
        # self.statements[s_25.id] = s_25
        # self.statements[s_26.id] = s_26
        # self.statements[s_27.id] = s_27
        # self.statements[s_28.id] = s_28

        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        self.control_regions[2] = ControlRegion(2, 1, 110, 1, "LOOP")
        self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 17



#Procedure 4
#################

def create_graphq401(self):
        s_1 = Statement(1, 1, 1, 2, True, True, 14400000, 1267200000, Variable("TRADE", "table var",
                                                                               "T_ID BIGINT",
                                                                               []), ["TRADE"],
                        "select T_ID from TRADE where T_CA_ID = 43000002061 and T_DTS >= '2005-03-11' order by T_DTS asc")
        s_2 = Statement(2, 1, 1, 2, True, True, 14400000, 993600000, Variable("results", "table var",
                                                                              "HH_H_T_ID BIGINT, HH_T_ID BIGINT, HH_BEFORE_QTY INTEGER, HH_AFTER_QTY INTEGER",
                                                                              []), ["HOLDING_HISTORY"],
                        "select HH_H_T_ID, HH_T_ID, HH_BEFORE_QTY, HH_AFTER_QTY from HOLDING_HISTORY where HH_H_T_ID in (select HH_H_T_ID from HOLDING_HISTORY where HH_T_ID = 200000014543998)")
        s_3 = Statement(3, 1, 1, 1, True, False, 1, 8,
                         Variable("result", "table var", "cnt BIGINT", ["results"]), [],
                         "SELECT count(*) cnt FROM :results ")
        s_4 = Statement(4, 1, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],
                         "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4


        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        # self.control_regions[2] = ControlRegion(2, 1, 110, 1, "LOOP")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 4



#Procedure 5
#################

def create_graphq501(self):
        s_1 = Statement(1, 1, 1, 2, True, True, 14400000, 993600000, Variable("TRADE", "table var","",[]), ["TRADE"],"select * from TRADE")
        s_2 = Statement(2, 1, 1, 2, True, True, 5, 10000, Variable("STATUS_TYPE", "table var","",[]), ["STATUS_TYPE"],"select * from STATUS_TYPE")
        s_3 = Statement(3, 1, 1, 2, True, True, 5, 10000, Variable("TRADE_TYPE", "table var","",[]), ["TRADE_TYPE"],"select * from TRADE_TYPE")
        s_4 = Statement(4, 1, 1, 2, True, True, 1370, 100000, Variable("SECURITY", "table var","",[]), ["SECURITY"],"select * from SECURITY")
        s_5 = Statement(5, 1, 1, 2, True, True, 4, 10000, Variable("EXCHANGE", "table var","",[]), ["EXCHANGE"],"select * from EXCHANGE")
        s_6 = Statement(6, 1, 1, 2, True, True, 10000, 1000000, Variable("CUSTOMER_ACCOUNT", "table var","",[]), ["CUSTOMER_ACCOUNT"],"select * from CUSTOMER_ACCOUNT")
        s_7 = Statement(7, 1, 1, 2, True, True, 2000, 2000000, Variable("CUSTOMER", "table var","",[]), ["CUSTOMER"],"select * from CUSTOMER")
        s_8 = Statement(8, 1, 1, 2, True, True, 20, 10000, Variable("BROKER", "table var","",[]), ["BROKER"],"select * from BROKER")
        s_9 = Statement(9, 1, 1, 1, True, True, 144, 12672, Variable("", "table var",
                                                                               "T_ID BIGINT, T_DTS TIMESTAMPS, ST_NAME VARCHAR(4), TT_NAME VARCHAR(12), T_S_SYMB VARCHAR(15), T_QTY INTEGER, T_EXEC_NAME VARCHAR(49), T_CHRG DECIMAL, S_NAME VARCHAR(70), EX_NAME VARCHAR(100)",
                                                                               ["TRADE", "STATUS_TYPE", "TRADE_TYPE", "SECURITY", "EXCHANGE"]), [""],
                        "select T_ID, T_DTS, ST_NAME, TT_NAME, T_S_SYMB, T_QTY, T_EXEC_NAME, T_CHRG, S_NAME, EX_NAME from :TRADE, :STATUS_TYPE, :TRADE_TYPE, :SECURITY, :EXCHANGE where T_CA_ID <= 43000002061 and ST_ID = T_ST_ID and TT_ID = T_TT_ID and S_SYMB = T_S_SYMB and EX_ID = S_EX_ID order by  T_DTS desc")
        s_10 = Statement(10, 1, 1, 1, True, True, 144, 9936, Variable("results", "table var",
                                                                              "HH_H_T_ID BIGINT, HH_T_ID BIGINT, HH_BEFORE_QTY INTEGER, HH_AFTER_QTY INTEGER",
                                                                              ["CUSTOMER_ACCOUNT", "CUSTOMER", "BROKER"]), [""],
                        "select C_L_NAME, C_F_NAME, B_NAME from :CUSTOMER_ACCOUNT, :CUSTOMER, :BROKER where CA_ID <= 43000002061 and C_ID = CA_C_ID and B_ID = CA_B_ID")
        s_11 = Statement(11, 1, 1, 1, True, False, 1, 8,
                         Variable("result", "table var", "cnt BIGINT", ["results"]), [],
                         "SELECT count(*) cnt FROM :results ")
        s_12 = Statement(12, 1, 1, 1, True, False, 0, 0, Variable("", "", "", ["result"]), [],
                         "SELECT * FROM :result")
        self.statements[s_1.id] = s_1
        self.statements[s_2.id] = s_2
        self.statements[s_3.id] = s_3
        self.statements[s_4.id] = s_4
        self.statements[s_5.id] = s_5
        self.statements[s_6.id] = s_6
        self.statements[s_7.id] = s_7
        self.statements[s_8.id] = s_8
        self.statements[s_9.id] = s_9
        self.statements[s_10.id] = s_10
        self.statements[s_11.id] = s_11
        self.statements[s_12.id] = s_12


        # estimate_costs_of_statements()
        for sid in self.statements:
            stmt = self.statements.get(sid)
            for csid in self.statements:
                cstmt = self.statements.get(csid)
                if stmt.vars.out_var_name in cstmt.vars.in_var_names:
                    stmt.consumers.append(csid)
                    cstmt.producers.append(sid)

        # region_id, parent_eb_id, l_count, o_l_count
        self.control_regions[1] = ControlRegion(1, 1, 1, 1, "SEQ")
        # self.control_regions[2] = ControlRegion(2, 1, 110, 1, "LOOP")
        # self.control_regions[3] = ControlRegion(3, 1, 1, 1, "SEQ")
        for sid in self.statements:
            self.control_regions.get(self.statements.get(sid).ctrl_reg_id).add_statement(sid)
        return 12

    
